
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.Credit_cardsScalarFieldEnum = {
  CARD_ID: 'CARD_ID',
  USER_ID: 'USER_ID',
  CARD_NUMBER: 'CARD_NUMBER',
  CARD_TYPE: 'CARD_TYPE',
  CREDIT_LIMIT: 'CREDIT_LIMIT',
  BALANCE: 'BALANCE',
  INTEREST_RATE: 'INTEREST_RATE',
  DUE_DATE: 'DUE_DATE',
  STATUS: 'STATUS'
};

exports.Prisma.Payment_planScalarFieldEnum = {
  PLAN_ID: 'PLAN_ID',
  USER_ID: 'USER_ID',
  CARD_ID: 'CARD_ID',
  CHOSEN_PLAN: 'CHOSEN_PLAN',
  PROGRESS: 'PROGRESS',
  PLAN_START: 'PLAN_START',
  EST_PLAN_FINISH: 'EST_PLAN_FINISH'
};

exports.Prisma.PaymentsScalarFieldEnum = {
  PAYMENT_ID: 'PAYMENT_ID',
  USER_ID: 'USER_ID',
  CARD_ID: 'CARD_ID',
  PAID: 'PAID',
  PAYMENT_DATE: 'PAYMENT_DATE',
  PAYMENT_METHOD: 'PAYMENT_METHOD',
  STATUS: 'STATUS'
};

exports.Prisma.PlaidtransactionScalarFieldEnum = {
  id: 'id',
  transactionId: 'transactionId',
  name: 'name',
  amount: 'amount',
  date: 'date',
  account_id: 'account_id',
  userId: 'userId',
  category: 'category',
  iso_currency_code: 'iso_currency_code',
  createdAt: 'createdAt'
};

exports.Prisma.Security_logScalarFieldEnum = {
  LOG_ID: 'LOG_ID',
  USER_ID: 'USER_ID',
  ACTION: 'ACTION',
  LOG_TIME: 'LOG_TIME'
};

exports.Prisma.SettlementsScalarFieldEnum = {
  SET_ID: 'SET_ID',
  USER_ID: 'USER_ID',
  CARD_ID: 'CARD_ID',
  ORIGINAL_AMOUNT: 'ORIGINAL_AMOUNT',
  SETTLED_AMOUNT: 'SETTLED_AMOUNT',
  SET_DATE: 'SET_DATE',
  STATUS: 'STATUS'
};

exports.Prisma.TransactionsScalarFieldEnum = {
  TRANS_ID: 'TRANS_ID',
  CARD_ID: 'CARD_ID',
  TRANS_TYPE: 'TRANS_TYPE',
  AMOUNT: 'AMOUNT',
  MERCHANT: 'MERCHANT',
  TRANS_DATE: 'TRANS_DATE'
};

exports.Prisma.User_sessionScalarFieldEnum = {
  SESSION_ID: 'SESSION_ID',
  USER_ID: 'USER_ID',
  SESSION_TOKEN: 'SESSION_TOKEN',
  EXPIRES: 'EXPIRES'
};

exports.Prisma.UserplaiditemScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  itemId: 'itemId',
  encryptedAccessToken: 'encryptedAccessToken',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UsersScalarFieldEnum = {
  USER_ID: 'USER_ID',
  PASS: 'PASS',
  USER_LNAME: 'USER_LNAME',
  USER_FNAME: 'USER_FNAME',
  STREET: 'STREET',
  CITY: 'CITY',
  STATE: 'STATE',
  ZIP: 'ZIP',
  GENDER: 'GENDER',
  PHONE: 'PHONE',
  EMAIL: 'EMAIL'
};

exports.Prisma.Debt_paymentScalarFieldEnum = {
  id: 'id',
  debtId: 'debtId',
  userId: 'userId',
  amount: 'amount',
  date: 'date',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DebtScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  balance: 'balance',
  currentBalance: 'currentBalance',
  interestRate: 'interestRate',
  minimumPayment: 'minimumPayment',
  dueDate: 'dueDate',
  extraPayment: 'extraPayment',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.credit_cardsOrderByRelevanceFieldEnum = {
  CARD_NUMBER: 'CARD_NUMBER'
};

exports.Prisma.plaidtransactionOrderByRelevanceFieldEnum = {
  id: 'id',
  transactionId: 'transactionId',
  name: 'name',
  account_id: 'account_id',
  userId: 'userId',
  category: 'category',
  iso_currency_code: 'iso_currency_code'
};

exports.Prisma.security_logOrderByRelevanceFieldEnum = {
  ACTION: 'ACTION'
};

exports.Prisma.transactionsOrderByRelevanceFieldEnum = {
  MERCHANT: 'MERCHANT'
};

exports.Prisma.user_sessionOrderByRelevanceFieldEnum = {
  SESSION_TOKEN: 'SESSION_TOKEN'
};

exports.Prisma.userplaiditemOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  itemId: 'itemId',
  encryptedAccessToken: 'encryptedAccessToken'
};

exports.Prisma.usersOrderByRelevanceFieldEnum = {
  PASS: 'PASS',
  USER_LNAME: 'USER_LNAME',
  USER_FNAME: 'USER_FNAME',
  STREET: 'STREET',
  CITY: 'CITY',
  STATE: 'STATE',
  ZIP: 'ZIP',
  GENDER: 'GENDER',
  PHONE: 'PHONE',
  EMAIL: 'EMAIL'
};

exports.Prisma.debt_paymentOrderByRelevanceFieldEnum = {
  id: 'id',
  debtId: 'debtId',
  userId: 'userId',
  notes: 'notes'
};

exports.Prisma.debtOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name'
};
exports.credit_cards_CARD_TYPE = exports.$Enums.credit_cards_CARD_TYPE = {
  Visa: 'Visa',
  MasterCard: 'MasterCard',
  Amex: 'Amex',
  Discover: 'Discover'
};

exports.credit_cards_STATUS = exports.$Enums.credit_cards_STATUS = {
  Active: 'Active',
  Blocked: 'Blocked',
  Closed: 'Closed'
};

exports.payment_plan_CHOSEN_PLAN = exports.$Enums.payment_plan_CHOSEN_PLAN = {
  Lowest: 'Lowest',
  Highest: 'Highest'
};

exports.payments_PAYMENT_METHOD = exports.$Enums.payments_PAYMENT_METHOD = {
  Transfer: 'Transfer',
  Check: 'Check',
  Credit: 'Credit',
  Cash: 'Cash',
  ACH: 'ACH'
};

exports.payments_STATUS = exports.$Enums.payments_STATUS = {
  Pending: 'Pending',
  Completed: 'Completed',
  Failed: 'Failed'
};

exports.settlements_STATUS = exports.$Enums.settlements_STATUS = {
  Pending: 'Pending',
  Completed: 'Completed',
  Rejected: 'Rejected'
};

exports.transactions_TRANS_TYPE = exports.$Enums.transactions_TRANS_TYPE = {
  Purchase: 'Purchase',
  Fee: 'Fee',
  Interest: 'Interest',
  Refund: 'Refund',
  Payment: 'Payment',
  Subscription: 'Subscription'
};

exports.Prisma.ModelName = {
  credit_cards: 'credit_cards',
  payment_plan: 'payment_plan',
  payments: 'payments',
  plaidtransaction: 'plaidtransaction',
  security_log: 'security_log',
  settlements: 'settlements',
  transactions: 'transactions',
  user_session: 'user_session',
  userplaiditem: 'userplaiditem',
  users: 'users',
  debt_payment: 'debt_payment',
  debt: 'debt'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
