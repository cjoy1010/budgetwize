generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/.prisma/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model credit_cards {
  CARD_ID       Int                    @id @default(autoincrement())
  USER_ID       Int
  CARD_NUMBER   String                 @unique(map: "CARD_NUMBER") @db.VarChar(16)
  CARD_TYPE     credit_cards_CARD_TYPE
  CREDIT_LIMIT  Decimal                @db.Decimal(10, 2)
  BALANCE       Decimal?               @default(0.00) @db.Decimal(10, 2)
  INTEREST_RATE Decimal?               @db.Decimal(5, 2)
  DUE_DATE      DateTime               @db.Date
  STATUS        credit_cards_STATUS?   @default(Active)
  users         users                  @relation(fields: [USER_ID], references: [USER_ID], onDelete: NoAction, onUpdate: NoAction, map: "FK_CREDIT_CARDS")
  payment_plan  payment_plan[]
  payments      payments[]
  settlements   settlements[]
  transactions  transactions[]

  @@index([USER_ID], map: "FK_CREDIT_CARDS")
}

model payment_plan {
  PLAN_ID         Int                       @id @default(autoincrement())
  USER_ID         Int
  CARD_ID         Int
  CHOSEN_PLAN     payment_plan_CHOSEN_PLAN?
  PROGRESS        Int
  PLAN_START      DateTime?                 @default(now()) @db.Timestamp(0)
  EST_PLAN_FINISH DateTime?                 @db.Timestamp(0)
  users           users                     @relation(fields: [USER_ID], references: [USER_ID], onDelete: NoAction, onUpdate: NoAction, map: "FK_PAYMENT_PLAN")
  credit_cards    credit_cards              @relation(fields: [CARD_ID], references: [CARD_ID], onDelete: NoAction, onUpdate: NoAction, map: "FK_PAYMENT_PLAN1")

  @@index([USER_ID], map: "FK_PAYMENT_PLAN")
  @@index([CARD_ID], map: "FK_PAYMENT_PLAN1")
}

model payments {
  PAYMENT_ID     Int                     @id @default(autoincrement())
  USER_ID        Int?
  CARD_ID        Int?
  PAID           Decimal                 @db.Decimal(10, 2)
  PAYMENT_DATE   DateTime?               @default(now()) @db.Timestamp(0)
  PAYMENT_METHOD payments_PAYMENT_METHOD
  STATUS         payments_STATUS?        @default(Pending)
  users          users?                  @relation(fields: [USER_ID], references: [USER_ID], onDelete: NoAction, onUpdate: NoAction, map: "FK_PAYMENTS")
  credit_cards   credit_cards?           @relation(fields: [CARD_ID], references: [CARD_ID], onDelete: NoAction, onUpdate: NoAction, map: "FK_PAYMENTS1")

  @@index([USER_ID], map: "FK_PAYMENTS")
  @@index([CARD_ID], map: "FK_PAYMENTS1")
}

model plaidtransaction {
  id                String    @id
  transactionId     String?   @unique(map: "transactionId")
  name              String
  amount            Float     @db.Float
  date              DateTime  @db.DateTime(0)
  account_id        String
  userId            String
  category          String?
  iso_currency_code String?   @db.VarChar(10)
  createdAt         DateTime? @default(now()) @db.DateTime(0)

  @@index([userId], map: "PlaidTransaction_userId_idx")
}

model security_log {
  LOG_ID   Int       @id @default(autoincrement())
  USER_ID  Int?
  ACTION   String    @db.VarChar(255)
  LOG_TIME DateTime? @default(now()) @db.Timestamp(0)
  users    users?    @relation(fields: [USER_ID], references: [USER_ID], onDelete: NoAction, onUpdate: NoAction, map: "FK_SECURITY_LOG")

  @@index([USER_ID], map: "FK_SECURITY_LOG")
}

model settlements {
  SET_ID          Int                 @id @default(autoincrement())
  USER_ID         Int?
  CARD_ID         Int?
  ORIGINAL_AMOUNT Decimal             @db.Decimal(10, 2)
  SETTLED_AMOUNT  Decimal             @db.Decimal(10, 2)
  SET_DATE        DateTime?           @default(now()) @db.Timestamp(0)
  STATUS          settlements_STATUS? @default(Pending)
  credit_cards    credit_cards?       @relation(fields: [CARD_ID], references: [CARD_ID], onDelete: NoAction, onUpdate: NoAction, map: "FK_SETTLEMENTS_CARD")
  users           users?              @relation(fields: [USER_ID], references: [USER_ID], onDelete: NoAction, onUpdate: NoAction, map: "FK_SETTLEMENTS_USER")

  @@index([CARD_ID], map: "FK_SETTLEMENTS_CARD")
  @@index([USER_ID], map: "FK_SETTLEMENTS_USER")
}

model transactions {
  TRANS_ID     Int                     @id @default(autoincrement())
  CARD_ID      Int?
  TRANS_TYPE   transactions_TRANS_TYPE
  AMOUNT       Decimal                 @db.Decimal(10, 2)
  MERCHANT     String?                 @db.VarChar(100)
  TRANS_DATE   DateTime?               @default(now()) @db.Timestamp(0)
  credit_cards credit_cards?           @relation(fields: [CARD_ID], references: [CARD_ID], onDelete: NoAction, onUpdate: NoAction, map: "FK_TRANSACTIONS")

  @@index([CARD_ID], map: "FK_TRANSACTIONS")
}

model user_session {
  SESSION_ID    Int      @id @default(autoincrement())
  USER_ID       Int?
  SESSION_TOKEN String   @unique(map: "SESSION_TOKEN") @db.VarChar(255)
  EXPIRES       DateTime @db.Timestamp(0)
  users         users?   @relation(fields: [USER_ID], references: [USER_ID], onDelete: NoAction, onUpdate: NoAction, map: "FK_USER_SESSION")

  @@index([USER_ID], map: "FK_USER_SESSION")
}

model userplaiditem {
  id                   String    @id
  userId               String    @unique(map: "userId")
  itemId               String    @unique(map: "itemId")
  encryptedAccessToken String    @db.Text
  createdAt            DateTime? @default(now()) @db.DateTime(0)
  updatedAt            DateTime? @default(now()) @db.DateTime(0)

  @@index([userId], map: "idx_userId")
}

model users {
  USER_ID      Int            @id @default(autoincrement())
  PASS         String         @db.VarChar(20)
  USER_LNAME   String         @db.VarChar(15)
  USER_FNAME   String         @db.VarChar(15)
  STREET       String?        @db.VarChar(25)
  CITY         String?        @db.VarChar(20)
  STATE        String?        @db.Char(2)
  ZIP          String?        @db.VarChar(15)
  GENDER       String?        @db.Char(1)
  PHONE        String?        @db.VarChar(10)
  EMAIL        String?        @db.VarChar(30)
  credit_cards credit_cards[]
  payment_plan payment_plan[]
  payments     payments[]
  security_log security_log[]
  settlements  settlements[]
  user_session user_session[]
}

model debt_payment {
  id        String   @id @default(cuid())
  debtId    String
  userId    String
  amount    Decimal  @db.Decimal(10, 2)
  date      DateTime @default(now())
  notes     String?
  debt      debt     @relation(fields: [debtId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([debtId])
  @@index([userId])
}

model debt {
  id             String         @id @default(cuid())
  userId         String
  name           String
  balance        Decimal        @db.Decimal(10, 2)
  currentBalance Decimal        @db.Decimal(10, 2)
  interestRate   Decimal        @db.Decimal(5, 2)
  minimumPayment Decimal        @db.Decimal(10, 2)
  dueDate        DateTime       @db.Date
  extraPayment   Decimal?       @db.Decimal(10, 2)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  payments       debt_payment[]

  @@index([userId])
}

enum transactions_TRANS_TYPE {
  Purchase
  Fee
  Interest
  Refund
  Payment
  Subscription
}

enum credit_cards_CARD_TYPE {
  Visa
  MasterCard
  Amex
  Discover
}

enum payment_plan_CHOSEN_PLAN {
  Lowest
  Highest
}

enum payments_PAYMENT_METHOD {
  Transfer
  Check
  Credit
  Cash
  ACH
}

enum settlements_STATUS {
  Pending
  Completed
  Rejected
}

enum payments_STATUS {
  Pending
  Completed
  Failed
}

enum credit_cards_STATUS {
  Active
  Blocked
  Closed
}
