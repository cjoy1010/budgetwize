{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/jacob/Desktop/budgetwize-main/components/credit-card-payoff-calculator.tsx"],"sourcesContent":["'use client';\r\n\r\nimport React, { useState } from 'react';\r\n\r\ninterface Subscription {\r\n  id: string;\r\n  name: string;\r\n  amount: number;\r\n  checked: boolean;\r\n  isEditing?: boolean;\r\n  isRecurring: boolean;\r\n}\r\n\r\nconst CreditCardPayoffCalculator: React.FC = () => {\r\n  const [balance, setBalance] = useState<string>('');\r\n  const [monthlyPayment, setMonthlyPayment] = useState<string>('');\r\n  const [apr, setApr] = useState<string>('');\r\n  const [totalPaid, setTotalPaid] = useState<number>(0);\r\n  const [totalBalance, setTotalBalance] = useState<number>(0);\r\n  const [payoffSchedule, setPayoffSchedule] = useState<any[]>([]);\r\n  const [newSubscriptionName, setNewSubscriptionName] = useState<string>('');\r\n  const [newSubscriptionAmount, setNewSubscriptionAmount] = useState<string>('');\r\n  const [newSubscriptionIsRecurring, setNewSubscriptionIsRecurring] = useState<boolean>(true);\r\n  const [subscriptions, setSubscriptions] = useState<Subscription[]>([\r\n    { id: '1', name: 'Netflix', amount: 15, checked: false, isRecurring: true },\r\n    { id: '2', name: 'Spotify', amount: 10, checked: false, isRecurring: true },\r\n    { id: '3', name: 'Amazon Prime', amount: 20, checked: false, isRecurring: true },\r\n  ]);\r\n\r\n  const calculatePayoffTime = (balance: number, monthlyPayment: number, apr: number, recurringExpenses: number = 0) => {\r\n    const monthlyInterestRate = apr / 12 / 100;\r\n    let months = 0;\r\n    let currentBalance = balance;\r\n    let schedule = [];\r\n\r\n    while (currentBalance > 0) {\r\n      // Add recurring expenses to the balance each month\r\n      currentBalance += recurringExpenses;\r\n      \r\n      const interestPayment = currentBalance * monthlyInterestRate;\r\n      const principalPayment = monthlyPayment - interestPayment;\r\n      currentBalance = currentBalance - principalPayment;\r\n      months++;\r\n\r\n      schedule.push({\r\n        month: months,\r\n        payment: monthlyPayment,\r\n        principal: principalPayment,\r\n        interest: interestPayment,\r\n        recurringExpenses,\r\n        remaining: Math.max(0, currentBalance)\r\n      });\r\n\r\n      if (months > 600) break;\r\n    }\r\n\r\n    return { months, schedule };\r\n  };\r\n\r\n  const handleCalculate = () => {\r\n    const balanceNum = parseFloat(balance);\r\n    const monthlyPaymentNum = parseFloat(monthlyPayment);\r\n    const aprNum = parseFloat(apr);\r\n\r\n    if (!balanceNum || !monthlyPaymentNum || aprNum === undefined || aprNum < 0) {\r\n      alert('Please fill in all fields with valid values');\r\n      return;\r\n    }\r\n\r\n    // Calculate recurring expenses from checked subscriptions\r\n    const recurringExpenses = subscriptions\r\n      .filter(sub => sub.checked && sub.isRecurring)\r\n      .reduce((sum, sub) => sum + sub.amount, 0);\r\n\r\n    const monthlyRate = aprNum / 12 / 100;\r\n    if (monthlyPaymentNum <= (balanceNum + recurringExpenses) * monthlyRate && aprNum > 0) {\r\n      alert('Monthly payment is too low to pay off the debt');\r\n      return;\r\n    }\r\n\r\n    const { months, schedule } = calculatePayoffTime(balanceNum, monthlyPaymentNum, aprNum, recurringExpenses);\r\n    setPayoffSchedule(schedule);\r\n    setTotalBalance(balanceNum);\r\n  };\r\n\r\n  const handleLogPayment = () => {\r\n    const monthlyPaymentNum = parseFloat(monthlyPayment);\r\n    if (!monthlyPaymentNum) {\r\n      alert('Please enter a monthly payment amount');\r\n      return;\r\n    }\r\n\r\n    setTotalPaid(prev => prev + monthlyPaymentNum);\r\n  };\r\n\r\n  const handleSubscriptionChange = (id: string) => {\r\n    const newSubscriptions = subscriptions.map(sub => \r\n      sub.id === id ? { ...sub, checked: !sub.checked } : sub\r\n    );\r\n    setSubscriptions(newSubscriptions);\r\n    updateMonthlyPayment(newSubscriptions);\r\n  };\r\n\r\n  const handleSubscriptionEdit = (id: string) => {\r\n    const newSubscriptions = subscriptions.map(sub =>\r\n      sub.id === id ? { ...sub, isEditing: true } : sub\r\n    );\r\n    setSubscriptions(newSubscriptions);\r\n  };\r\n\r\n  const handleSubscriptionSave = (id: string, newName: string, newAmount: string, isRecurring: boolean) => {\r\n    const amount = parseFloat(newAmount);\r\n    if (isNaN(amount)) {\r\n      alert('Please enter a valid amount');\r\n      return;\r\n    }\r\n\r\n    const newSubscriptions = subscriptions.map(sub =>\r\n      sub.id === id ? { ...sub, name: newName, amount, isRecurring, isEditing: false } : sub\r\n    );\r\n    setSubscriptions(newSubscriptions);\r\n    updateMonthlyPayment(newSubscriptions);\r\n  };\r\n\r\n  const handleAddSubscription = () => {\r\n    if (!newSubscriptionName || !newSubscriptionAmount) {\r\n      alert('Please enter both name and amount');\r\n      return;\r\n    }\r\n\r\n    const amount = parseFloat(newSubscriptionAmount);\r\n    if (isNaN(amount)) {\r\n      alert('Please enter a valid amount');\r\n      return;\r\n    }\r\n\r\n    const newSubscription: Subscription = {\r\n      id: Date.now().toString(),\r\n      name: newSubscriptionName,\r\n      amount,\r\n      checked: false,\r\n      isRecurring: newSubscriptionIsRecurring\r\n    };\r\n\r\n    setSubscriptions([...subscriptions, newSubscription]);\r\n    setNewSubscriptionName('');\r\n    setNewSubscriptionAmount('');\r\n  };\r\n\r\n  const handleDeleteSubscription = (id: string) => {\r\n    const newSubscriptions = subscriptions.filter(sub => sub.id !== id);\r\n    setSubscriptions(newSubscriptions);\r\n    updateMonthlyPayment(newSubscriptions);\r\n  };\r\n\r\n  const updateMonthlyPayment = (currentSubscriptions: Subscription[]) => {\r\n    // Only add one-time savings to the monthly payment\r\n    const oneTimeSavings = currentSubscriptions\r\n      .filter(sub => sub.checked && !sub.isRecurring)\r\n      .reduce((sum, sub) => sum + sub.amount, 0);\r\n\r\n    const basePayment = parseFloat(monthlyPayment) || 0;\r\n    const currentOneTimeSavings = subscriptions\r\n      .filter(sub => sub.checked && !sub.isRecurring)\r\n      .reduce((sum, sub) => sum + sub.amount, 0);\r\n    \r\n    const newPayment = basePayment - currentOneTimeSavings + oneTimeSavings;\r\n    setMonthlyPayment(newPayment.toString());\r\n  };\r\n\r\n  const progressPercentage = totalBalance > 0 ? (totalPaid / totalBalance) * 100 : 0;\r\n\r\n  return (\r\n    <div className=\"p-4 bg-white rounded-lg shadow-lg\">\r\n      <h2 className=\"text-2xl font-bold mb-4\">Credit Card Payoff Calculator</h2>\r\n      \r\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\r\n        <div className=\"space-y-1\">\r\n          <label className=\"block text-sm font-medium\">Current Balance</label>\r\n          <input\r\n            type=\"number\"\r\n            value={balance}\r\n            onChange={(e) => setBalance(e.target.value)}\r\n            className=\"w-full p-2 border rounded\"\r\n            placeholder=\"0\"\r\n            min=\"0\"\r\n            step=\"0.01\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"space-y-1\">\r\n          <label className=\"block text-sm font-medium\">Monthly Payment</label>\r\n          <input\r\n            type=\"number\"\r\n            value={monthlyPayment}\r\n            onChange={(e) => setMonthlyPayment(e.target.value)}\r\n            className=\"w-full p-2 border rounded\"\r\n            placeholder=\"0\"\r\n            min=\"0\"\r\n            step=\"0.01\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"space-y-1\">\r\n          <label className=\"block text-sm font-medium\">APR (%)</label>\r\n          <input\r\n            type=\"number\"\r\n            value={apr}\r\n            onChange={(e) => setApr(e.target.value)}\r\n            className=\"w-full p-2 border rounded\"\r\n            placeholder=\"0\"\r\n            min=\"0\"\r\n            max=\"100\"\r\n            step=\"0.01\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"mb-4\">\r\n        <h3 className=\"text-lg font-semibold mb-3\">Subscriptions & Expenses</h3>\r\n        \r\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-3 mb-3 p-3 bg-gray-50 rounded-lg\">\r\n          <input\r\n            type=\"text\"\r\n            value={newSubscriptionName}\r\n            onChange={(e) => setNewSubscriptionName(e.target.value)}\r\n            placeholder=\"Name\"\r\n            className=\"p-2 border rounded\"\r\n          />\r\n          <input\r\n            type=\"number\"\r\n            value={newSubscriptionAmount}\r\n            onChange={(e) => setNewSubscriptionAmount(e.target.value)}\r\n            placeholder=\"Amount\"\r\n            min=\"0\"\r\n            step=\"0.01\"\r\n            className=\"p-2 border rounded\"\r\n          />\r\n          <div className=\"flex items-center space-x-2\">\r\n            <input\r\n              type=\"checkbox\"\r\n              id=\"recurring\"\r\n              checked={newSubscriptionIsRecurring}\r\n              onChange={(e) => setNewSubscriptionIsRecurring(e.target.checked)}\r\n              className=\"rounded\"\r\n            />\r\n            <label htmlFor=\"recurring\" className=\"text-sm\">Recurring monthly expense</label>\r\n          </div>\r\n          <button\r\n            onClick={handleAddSubscription}\r\n            className=\"px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700\"\r\n          >\r\n            Add\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"space-y-2\">\r\n          {subscriptions.map((sub) => (\r\n            <div key={sub.id} className=\"flex items-center justify-between p-3 bg-white border rounded-lg shadow-sm\">\r\n              <div className=\"flex items-center space-x-3\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={sub.checked}\r\n                  onChange={() => handleSubscriptionChange(sub.id)}\r\n                  className=\"rounded\"\r\n                />\r\n                {sub.isEditing ? (\r\n                  <div className=\"flex space-x-2\">\r\n                    <input\r\n                      type=\"text\"\r\n                      defaultValue={sub.name}\r\n                      className=\"p-1 border rounded\"\r\n                      onBlur={(e) => handleSubscriptionSave(sub.id, e.target.value, sub.amount.toString(), sub.isRecurring)}\r\n                    />\r\n                    <input\r\n                      type=\"number\"\r\n                      defaultValue={sub.amount}\r\n                      min=\"0\"\r\n                      step=\"0.01\"\r\n                      className=\"p-1 border rounded w-24\"\r\n                      onBlur={(e) => handleSubscriptionSave(sub.id, sub.name, e.target.value, sub.isRecurring)}\r\n                    />\r\n                    <div className=\"flex items-center space-x-2\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        id={`recurring-${sub.id}`}\r\n                        defaultChecked={sub.isRecurring}\r\n                        className=\"rounded\"\r\n                        onChange={(e) => handleSubscriptionSave(sub.id, sub.name, sub.amount.toString(), e.target.checked)}\r\n                      />\r\n                      <label htmlFor={`recurring-${sub.id}`} className=\"text-sm\">Recurring</label>\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <span>{sub.name} - ${sub.amount}</span>\r\n                    {sub.isRecurring && (\r\n                      <span className=\"text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded\">Monthly</span>\r\n                    )}\r\n                  </div>\r\n                )}\r\n              </div>\r\n              <div className=\"flex space-x-2\">\r\n                <button\r\n                  onClick={() => handleSubscriptionEdit(sub.id)}\r\n                  className=\"px-3 py-1 text-sm bg-blue-600 text-white rounded hover:bg-blue-700\"\r\n                >\r\n                  Edit\r\n                </button>\r\n                <button\r\n                  onClick={() => handleDeleteSubscription(sub.id)}\r\n                  className=\"px-3 py-1 text-sm bg-red-600 text-white rounded hover:bg-red-700\"\r\n                >\r\n                  Delete\r\n                </button>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"flex space-x-4 mb-4\">\r\n        <button\r\n          onClick={handleCalculate}\r\n          className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\r\n        >\r\n          Calculate Payoff Time\r\n        </button>\r\n        <button\r\n          onClick={handleLogPayment}\r\n          className=\"px-4 py-2 bg-green-600 text-white rounded hover:bg-green-700\"\r\n        >\r\n          Log This Month's Payment\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"mb-4\">\r\n        <h3 className=\"text-lg font-semibold mb-3\">Your Debt Payoff Progress</h3>\r\n        <div className=\"w-full bg-gray-200 rounded-full h-4\">\r\n          <div\r\n            className=\"bg-blue-600 h-4 rounded-full transition-all duration-300\"\r\n            style={{ width: `${progressPercentage}%` }}\r\n          />\r\n        </div>\r\n        <p className=\"mt-2 text-sm\">\r\n          You have paid off ${totalPaid.toFixed(2)} of ${totalBalance.toFixed(2)} ({progressPercentage.toFixed(1)}%)\r\n        </p>\r\n      </div>\r\n\r\n      {payoffSchedule.length > 0 && (\r\n        <div className=\"overflow-x-auto\">\r\n          <h3 className=\"text-lg font-semibold mb-3\">Monthly Payment Schedule</h3>\r\n          <table className=\"min-w-full divide-y divide-gray-200\">\r\n            <thead className=\"bg-gray-50\">\r\n              <tr>\r\n                <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Month</th>\r\n                <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Payment</th>\r\n                <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Principal</th>\r\n                <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Interest</th>\r\n                <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Recurring Expenses</th>\r\n                <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Remaining</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody className=\"bg-white divide-y divide-gray-200\">\r\n              {payoffSchedule.map((row, index) => (\r\n                <tr key={index}>\r\n                  <td className=\"px-4 py-2 whitespace-nowrap\">{row.month}</td>\r\n                  <td className=\"px-4 py-2 whitespace-nowrap\">${row.payment.toFixed(2)}</td>\r\n                  <td className=\"px-4 py-2 whitespace-nowrap\">${row.principal.toFixed(2)}</td>\r\n                  <td className=\"px-4 py-2 whitespace-nowrap\">${row.interest.toFixed(2)}</td>\r\n                  <td className=\"px-4 py-2 whitespace-nowrap\">${row.recurringExpenses.toFixed(2)}</td>\r\n                  <td className=\"px-4 py-2 whitespace-nowrap\">${row.remaining.toFixed(2)}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreditCardPayoffCalculator; "],"names":[],"mappings":"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","debugId":null}}]
}