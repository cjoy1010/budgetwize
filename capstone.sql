USE capstone;

-- Drop existing tables in correct order (child tables first, then parent tables)
DROP TABLE IF EXISTS SECURITY_LOG;
DROP TABLE IF EXISTS USER_SESSION;
DROP TABLE IF EXISTS PAYMENT_PLAN;
DROP TABLE IF EXISTS PAYMENTS;
DROP TABLE IF EXISTS TRANSACTIONS;
DROP TABLE IF EXISTS settlements;
DROP TABLE IF EXISTS plaidTransaction;
DROP TABLE IF EXISTS CREDIT_CARDS;
DROP TABLE IF EXISTS USERS;
DROP TABLE IF EXISTS UserPlaidItem;

-- USERS table
CREATE TABLE IF NOT EXISTS USERS (
  USER_ID INT AUTO_INCREMENT PRIMARY KEY,
  PASS VARCHAR(20) NOT NULL,
  USER_LNAME VARCHAR(15) NOT NULL,
  USER_FNAME VARCHAR(15) NOT NULL,
  STREET VARCHAR(25),
  CITY VARCHAR(20),
  STATE CHAR(2),
  ZIP VARCHAR(15),
  GENDER CHAR(1),
  PHONE VARCHAR(10),
  EMAIL VARCHAR(30)
);

-- CREDIT_CARDS table
CREATE TABLE IF NOT EXISTS CREDIT_CARDS (
  CARD_ID INT AUTO_INCREMENT PRIMARY KEY,
  USER_ID INT NOT NULL,
  CARD_NUMBER VARCHAR(16) UNIQUE NOT NULL,
  CARD_TYPE ENUM('Visa', 'MasterCard', 'Amex', 'Discover') NOT NULL,
  CREDIT_LIMIT DECIMAL(10,2) NOT NULL,
  BALANCE DECIMAL(10,2) DEFAULT 0.00,
  INTEREST_RATE DECIMAL(5,2),
  DUE_DATE DATE NOT NULL,
  STATUS ENUM('Active', 'Blocked', 'Closed') DEFAULT 'Active',
  CONSTRAINT FK_CREDIT_CARDS FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);

-- TRANSACTIONS table
CREATE TABLE IF NOT EXISTS TRANSACTIONS (
  TRANS_ID INT AUTO_INCREMENT PRIMARY KEY,
  CARD_ID INT,
  TRANS_TYPE ENUM('Purchase', 'Fee', 'Interest', 'Refund', 'Payment', 'Subscription') NOT NULL,
  AMOUNT DECIMAL(10,2) NOT NULL,
  MERCHANT VARCHAR(100),
  TRANS_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT FK_TRANSACTIONS FOREIGN KEY (CARD_ID) REFERENCES CREDIT_CARDS(CARD_ID)
);

-- PAYMENTS table
CREATE TABLE IF NOT EXISTS PAYMENTS (
  PAYMENT_ID INT AUTO_INCREMENT PRIMARY KEY,
  USER_ID INT,
  CARD_ID INT,
  PAID DECIMAL(10,2) NOT NULL,
  PAYMENT_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  PAYMENT_METHOD ENUM('Transfer', 'Check', 'Credit', 'Cash', 'ACH') NOT NULL,
  STATUS ENUM('Pending', 'Completed', 'Failed') DEFAULT 'Pending',
  CONSTRAINT FK_PAYMENTS FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
  CONSTRAINT FK_PAYMENTS1 FOREIGN KEY (CARD_ID) REFERENCES CREDIT_CARDS(CARD_ID)
);

-- PAYMENT_PLAN table
CREATE TABLE IF NOT EXISTS PAYMENT_PLAN (
  PLAN_ID INT AUTO_INCREMENT PRIMARY KEY,
  USER_ID INT NOT NULL,
  CARD_ID INT NOT NULL,
  CHOSEN_PLAN ENUM('Lowest', 'Highest'),
  PROGRESS INT NOT NULL,
  PLAN_START TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  EST_PLAN_FINISH TIMESTAMP,
  CONSTRAINT FK_PAYMENT_PLAN FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
  CONSTRAINT FK_PAYMENT_PLAN1 FOREIGN KEY (CARD_ID) REFERENCES CREDIT_CARDS(CARD_ID)
);

-- settlements table
CREATE TABLE IF NOT EXISTS settlements (
  SET_ID INT AUTO_INCREMENT PRIMARY KEY,
  USER_ID INT,
  CARD_ID INT,
  ORIGINAL_AMOUNT DECIMAL(10,2) NOT NULL,
  SETTLED_AMOUNT DECIMAL(10,2) NOT NULL,
  SET_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  STATUS ENUM('Pending', 'Completed', 'Rejected') DEFAULT 'Pending',
  CONSTRAINT FK_SETTLEMENTS_USER FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID),
  CONSTRAINT FK_SETTLEMENTS_CARD FOREIGN KEY (CARD_ID) REFERENCES CREDIT_CARDS(CARD_ID)
);

-- USER_SESSION table
CREATE TABLE IF NOT EXISTS USER_SESSION (
  SESSION_ID INT AUTO_INCREMENT PRIMARY KEY,
  USER_ID INT,
  SESSION_TOKEN VARCHAR(255) UNIQUE NOT NULL,
  EXPIRES TIMESTAMP NOT NULL,
  CONSTRAINT FK_USER_SESSION FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);

-- SECURITY_LOG table
CREATE TABLE IF NOT EXISTS SECURITY_LOG (
  LOG_ID INT AUTO_INCREMENT PRIMARY KEY,
  USER_ID INT,
  ACTION VARCHAR(255) NOT NULL,
  LOG_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT FK_SECURITY_LOG FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);

-- UserPlaidItem table
CREATE TABLE IF NOT EXISTS UserPlaidItem (
  id VARCHAR(191) PRIMARY KEY,
  userId VARCHAR(191) UNIQUE NOT NULL,
  itemId VARCHAR(191) UNIQUE NOT NULL,
  encryptedAccessToken TEXT NOT NULL,
  createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
  updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  INDEX idx_userId (userId)
);

-- plaidTransaction table
CREATE TABLE IF NOT EXISTS plaidTransaction (
  id VARCHAR(191) PRIMARY KEY,
  transactionId VARCHAR(191) UNIQUE,
  name VARCHAR(191) NOT NULL,
  amount FLOAT NOT NULL,
  date DATETIME NOT NULL,
  account_id VARCHAR(191) NOT NULL,
  userId VARCHAR(191) NOT NULL,
  category VARCHAR(191),
  iso_currency_code VARCHAR(10),
  createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
  INDEX PlaidTransaction_userId_idx (userId)
);
